{"name":"Blackjack","tagline":"blackjack","body":"# Blackjack\r\n<br>\r\nBlackjack или уште позната како дваесет и еден, е најиграна игра со карти ширум светот. Претставува игра на споредба на карти помеѓу играч и дилер (противник), каде играчите се натпреваруваат со противникот, но не и помеѓу себе. Се игра со еден, или повеќе, шпила на карти.\r\nЦелта е да се победи противникот, на еден од повеќето начини:\r\n•\tСо добивање на 21 поен од доделените две карти (уште наречено и blackjack), без, притоа, противникот да има blackjack;\r\n•\tСо постигнување на финален резултат кој е повисок од оној на противникот без да надмине 21, или;\r\n•\tДа се дозволи на противникот да влече дополнителни карти и притоа да надмине 21 поен.\r\nНа играчот му се дели иницијална рака со две карти чии вредности се додаваат. Кралот, Дамата и Џандарот имаат вредност 10 поени. Играчот или противникот можат да одлучат во броењето на кецот и тоа како 1 поен или 11 поени. Сите останати карти се бројат во зависност од нивната бројка. По добивањето на иницијалните карти, играчот може да одлучи дали ќе повика “hit” односно да добие уште една карта. Во секоја рунда, играчот или непријателот победува со 21 поен или со поседување на рака со најголема вредност, помала од 21. Поседување на рака со повеќе од 21 поен се нарекува “busting” и предизвикува губење на партијата. Играчот може да победи со поседување на финална вредност на рака до 21 и помалку доколку непријателот не го задоволува тој услов. Ако играчот поседува кец со вредност 11, таквата рака се нарекува “мека”, што значи дека играчот нема да надмине 21 со извлекување на било каква дополнителна карта. Поинаку, раката се нарекува “крута”. Играчот во секој момент може да ја предаде предноста на непријателот со одлука за чекање, “stand”.\r\nНепријателот може да извлекува карти се додека вредноста на неговара рака нема 17 или повеќе поени. Непријателот губи доколку има рака со вредност помала од играчот или не го задоволува условот (вредност на рака поголема од 21). Доколку и играчот и непријателот имаат рака со иста вредност, играчот губи.\r\nРешавање на проблемот:\r\nЗа имплементација на играта употребивме 3 помошни класи. Најпрво класа Card која се однесува на картата за играње и чува информации за:\r\n-\tФорма (лист, баклава, детелина, срце) (enum)\r\n-\tВредност (int)\r\n-\tСлика (Image)\r\n-\tПревртена слика (Image)\r\nи изгледа вака:\r\npublic enum Suit { \r\n        Spades,\r\n        Hearts,\r\n        Diamonds,\r\n        Clubs\r\n    }\r\n\r\n    public class Card\r\n    {\r\n        \r\n        public Suit suit { get; set; }\r\n        public int value { get; set; }\r\n        public Image image { get; set; }\r\n        public Image flippedImage { get; set; }\r\n\r\n        public Card(Suit suit, int value, Image image) {\r\n            this.suit = suit;\r\n            this.value = value;\r\n            this.image = image;\r\n        }\r\n        \r\n        public string getValueAsString() {\r\n            switch (value) { \r\n                case 1:\r\n                    return \"Ace\";\r\n                case 11:\r\n                    return \"Jack\";\r\n                case 12:\r\n                    return \"Queen\";\r\n                case 13:\r\n                    return \"King\";\r\n                default:\r\n                    return this.value.ToString();\r\n            }\r\n        }\r\n\r\n\r\n        public override string ToString()\r\n        {\r\n            return String.Format(\"{0} of {1}\", getValueAsString(), suit);\r\n        }\r\n    }\r\n\r\nКласата Deck претставува шпил од карти и чува листа објекти од класата Card. Во оваа класа дефинираме 52 карти секоја со уникатна форма, вредност и слика. Тука чуваме и метод shuffle() кој ги меша картите, и изгледа вака: \r\n\r\npublic void shuffle() {\r\n            Random rnd = new Random();\r\n            for (int i = 51; i > 0; i--) {\r\n                int random = rnd.Next(0, 52);\r\n                Card tmp = deck[i];\r\n                deck[i] = deck[random];\r\n                deck[random] = tmp;\r\n            }\r\n\r\n            cardsUsed = 0;\r\n        } \r\n}\r\n\r\nКласата Hand се користи за претставување на рака од карти. За таа цел, во себе чува податочен тип листа од карти. Методите декларирани за работа со оваа класа се со цел манипулација на листата од карти како добивање на карта,  додавање на карта, отстраување на карта, добивање на вредност на рака, и уништување на раката.\r\npublic class Hand\r\n{\r\n    private List<Card> hand = new List<Card>();\r\n\r\n    public Hand()\r\n    {\r\n\r\n    }\r\n\r\n    public void Clear()\r\n    {\r\n        hand.Clear();\r\n    }\r\n\r\n    public Card getCard(int position)\r\n    {\r\n        if (position >= 0 && position < hand.Count)\r\n        {\r\n            return (Card)hand.ElementAt(position);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public void addCard(Card card)\r\n    {\r\n        if (card != null)\r\n        {\r\n            hand.Add(card);\r\n        }\r\n    }\r\n\r\n    public void removeCard(Card card)\r\n    {\r\n        hand.Remove(card);\r\n    }\r\n\r\n    public void removeCard(int position)\r\n    {\r\n        if (position >= 0 && position < hand.Count)\r\n        {\r\n            hand.RemoveAt(position);\r\n        }\r\n    }\r\n\r\n    public int getCardCount()\r\n    {\r\n        return hand.Count;\r\n    }\r\n\r\n    public int getValue()\r\n    {\r\n        int value;\r\n        bool ace;\r\n        int cards;\r\n\r\n        value = 0;\r\n        ace = false;\r\n        cards = getCardCount();\r\n\r\n        for (int i = 0; i < cards; i++)\r\n        {\r\n            Card card = getCard(i);\r\n            int cardVal = Math.Min(card.value, 10);\r\n\r\n            if (cardVal == 1)\r\n            {\r\n                ace = true;\r\n            }\r\n\r\n            value = value + cardVal;\r\n        }\r\n\r\n        if (ace == true && value + 10 <= 21)\r\n        {\r\n            value = value + 10;\r\n        }\r\n\r\n        return value;\r\n    }\r\n\r\n    public String toString()\r\n    {\r\n        return \"Hand is \" + hand + \", value is \" + getValue();\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n  \r\n\r\n\r\n\r\n\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}